# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Peripheral {
  city: String!
  distance: Float!
}

type Area {
  id: Int!
  name: String!
  type: Int!
  banner: String!
  region: String!
  peripherals: [Peripheral!]!
  surface: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Classifier {
  id: Int!
  label: String!
  level: Int!
  translations: [String!]!
  parentId: Int
  children: [Classifier!]!
}

type LivingBeing {
  id: Float!
  images: [String!]!
  names: [String!]!
  endemic: Boolean!
  descriptions: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  areas: [Area!]!
  classifiers: [Classifier!]!
}

type User {
  id: Int!
  password: String!
  verifiedAt: DateTime
  role: Float!
  active: Boolean!
  lastName: String!
  firstName: String!
  email: String!
  phone: String!
  avatar: String!
  gender: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Meta {
  itemCount: Float!
  totalItems: Float
  itemsPerPage: Float!
  totalPages: Float
  currentPage: Float!
}

type LivingBeingPagination {
  items: [LivingBeing!]!
  meta: Meta!
}

type UserPagination {
  items: [User!]!
  meta: Meta!
}

type Adventure {
  id: Int!
  natureId: Float!
  naming: String!
  place: String!
  description: String!
  images: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  userId: Float!
}

type AdventurePagination {
  items: [Adventure!]!
  meta: Meta!
}

type AdventuresPagination {
  items: [Adventure!]!
  meta: Meta!
}

type CountAdventuresOutput {
  natureId: Int!
  count: Int!
}

type Visit {
  id: Int!
  createdAt: DateTime!
}

type Subscription {
  id: Int!
  verifiedAt: DateTime!
  createdAt: DateTime!
}

type Localization {
  areaId: Float!
  livingBeingId: Float!
}

type LoginDto {
  token: String!
  user: User!
}

type Classification {
  classifierId: Float!
  livingBeingId: Float!
}

type Query {
  areas: [Area!]!
  findArea(id: Int!): Area
  findLivingBeingByName(name: String!): LivingBeing
  findLivingBeing(id: Int!): LivingBeing
  paginateLivingBeings(input: PaginateLivingBeingsInput!): LivingBeingPagination!
  paginateUsers(input: PaginateUserInput!): UserPagination!
  countAdventures(input: CountAdventureInput!): [CountAdventuresOutput!]!
  findAdventure(id: Int!): Adventure
  _paginateAdventures(input: PaginateAdventureInput!): AdventurePagination!
  paginateAdventures(input: PaginateAdventuresInput!): AdventuresPagination!
  visit(id: Int!): Visit!
  subscription(id: Int!): Subscription!
  login(input: AuthInput!): LoginDto!
  whoAmI: User!
  classification(id: Int!): Classification!
  classifiers: [Classifier!]!
}

input PaginateLivingBeingsInput {
  keyword: String
  page: Float!
  limit: Float!
  sortBy: String!
  order: String!
}

input PaginateUserInput {
  keyword: String
  page: Float!
  limit: Float!
  filter: [String!]!
}

input CountAdventureInput {
  id: Float!
}

input PaginateAdventureInput {
  keyword: String
  page: Float!
  limit: Float!
  natureId: Float!
  userId: Float
}

input PaginateAdventuresInput {
  keyword: String
  page: Float!
  limit: Float!
  natureIds: [Float!]!
  sortBy: String!
  order: String!
}

input AuthInput {
  email: String!
  password: String!
}

type Mutation {
  createArea(input: CreateAreaInput!, banner: Upload!): Area!
  updateArea(banner: Upload, input: UpdateAreaInput!): Area!
  updateAreaBanner(areaId: Int!, banner: Upload!): Area!
  removeArea(id: Int!): Area!
  createLivingBeing(input: CreateLivingBeingInput!, images: [Upload!]!): LivingBeing!
  updateLivingBeing(input: UpdateLivingBeingInput!): LivingBeing!
  updateLivingBeingImage(input: UpdateImageInput!, image: Upload!): LivingBeing
  livingBeingAddImage(id: Int!, image: Upload!): LivingBeing
  livingBeingRemoveImage(input: UpdateImageInput!): LivingBeing
  removeLivingBeing(id: Int!): LivingBeing!
  createUser(input: CreateUserInput!, avatar: Upload!): User!
  updateUser(input: UpdateUserInput!): User!
  updatePassword(input: UpdatePasswordInput!): User
  updateUserAvatar(id: Int!, avatar: Upload!): User!
  createAdventure(detail: CreateAdventureInput!, images: [Upload!]!): Adventure!
  updateAdventureImage(input: UpdateAdventureImageInput!, image: Upload!): Adventure
  adventureAddImage(adventureId: Int!, image: Upload!): Adventure
  adventureRemoveImage(input: UpdateAdventureImageInput!): Adventure
  updateAdventure(input: UpdateAdventureInput!): Adventure!
  removeAdventure(id: Int!): Adventure!
  createVisit(createVisitInput: CreateVisitInput!): Visit!
  updateVisit(updateVisitInput: UpdateVisitInput!): Visit!
  removeVisit(id: Int!): Visit!
  createSubscription(createSubscriptionInput: CreateSubscriptionInput!): Subscription!
  updateSubscription(updateSubscriptionInput: UpdateSubscriptionInput!): Subscription!
  removeSubscription(id: Int!): Subscription!
  removeLocalization(id: Int!): Localization!
  createClassification(createClassificationInput: CreateClassificationInput!): Classification!
  updateClassification(updateClassificationInput: UpdateClassificationInput!): Classification!
  removeClassification(id: Int!): Classification!
  createClassifier(input: CreateClassifierInput!): Classifier!
  updateClassifier(input: UpdateClassifierInput!): Classifier!
  moveClassifier(input: MoveClassifierInput!): Classifier!
  removeClassifier(id: Int!): Classifier!
}

input CreateAreaInput {
  name: String!
  surface: Float!
  region: String!
  type: Int!
  peripherals: [PeripheralInput!]!
}

input PeripheralInput {
  city: String!
  distance: Float!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdateAreaInput {
  name: String!
  surface: Float!
  region: String!
  type: Int!
  peripherals: [PeripheralInput!]!
  id: Float!
}

input CreateLivingBeingInput {
  descriptions: [String!]!
  names: [String!]!
  endemic: Boolean!
  classifierIds: [Int!]!
  areaIds: [Int!]!
}

input UpdateLivingBeingInput {
  descriptions: [String!]!
  names: [String!]!
  endemic: Boolean!
  classifierIds: [Int!]!
  areaIds: [Int!]!
  id: Int!
}

input UpdateImageInput {
  id: Float!
  index: Float!
}

input CreateUserInput {
  password: String!
  lastName: String!
  firstName: String!
  email: String!
  phone: String!
  gender: Float!
}

input UpdateUserInput {
  lastName: String
  firstName: String
  email: String
  phone: String
  gender: Float
  id: Int!
  role: Int!
  active: Boolean!
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateAdventureInput {
  naming: String!
  place: String!
  description: String!
  natureId: Int!
}

input UpdateAdventureImageInput {
  adventureId: Float!
  imageIndex: Float!
}

input UpdateAdventureInput {
  naming: String!
  place: String!
  description: String!
  natureId: Int!
  id: Float!
}

input CreateVisitInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateVisitInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateSubscriptionInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSubscriptionInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateClassificationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateClassificationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateClassifierInput {
  label: String!
  translations: [String!]!
  level: Int!
  parentId: Int
}

input UpdateClassifierInput {
  label: String
  translations: [String!]
  id: Int!
}

input MoveClassifierInput {
  id: Int!
  parentId: Int!
}

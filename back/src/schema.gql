# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Contact {
  type: Float!
  list: [String!]!
}

type User {
  id: Int!
  password: String!
  verifiedAt: DateTime
  role: Float!
  active: Boolean!
  person: Person!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Person {
  id: Int!
  lastName: String!
  firstName: String!
  email: String!
  phone: String!
  avatar: String!
  gender: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  discovers: [Discover!]!
}

type Discover {
  id: Int!
  when: String!
  validatedAt: DateTime
  description: [String!]!
  person: Person!
  species: Species!
}

type Species {
  id: Int!
  images: [String!]!
  when: [String!]!
  names: [String!]!
  description: [String!]!
  localizations: [Localization!]!
  discover: Discover
  user: User!
}

type Localization {
  area: Area!
  species: Species!
  places: [String!]!
}

type Area {
  id: Int!
  name: String!
  banner: String!
  cities: [String!]!
  surface: Float!
  contacts: [Contact!]!
  office: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type Meta {
  itemCount: Float!
  totalItems: Float
  itemsPerPage: Float!
  totalPages: Float
  currentPage: Float!
}

type UserPagination {
  items: [User!]!
  meta: Meta!
}

type Collection {
  id: Int!
  natureId: Float!
  naming: String!
  place: String!
  description: String!
  images: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  userId: Float!
}

type CollectionPagination {
  items: [Collection!]!
  meta: Meta!
}

type CountCollectionsOutput {
  natureId: Int!
  count: Int!
}

type Visit {
  id: Int!
  createdAt: DateTime!
}

type Subscription {
  id: Int!
  verifiedAt: DateTime!
  createdAt: DateTime!
}

type Cost {
  ageSlice: Int!
  value: Float!
}

type Price {
  id: Int!
  malagasy: [Cost!]!
  foreigner: [Cost!]!
}

type LoginDto {
  token: String!
  user: User!
}

type Query {
  area(id: Int!): Area!
  species(id: Int!): Species!
  discover(id: Int!): Discover!
  paginateUsers(input: PaginateUserInput!): UserPagination!
  countCollections(input: CountCollectionInput!): [CountCollectionsOutput!]!
  paginateCollections(input: PaginateCollectionInput!): CollectionPagination!
  visit(id: Int!): Visit!
  subscription(id: Int!): Subscription!
  localization(id: Int!): Localization!
  price(id: Int!): Price!
  login(input: AuthInput!): LoginDto!
  whoAmI: User!
}

input PaginateUserInput {
  keyword: String
  page: Float!
  limit: Float!
  filter: [String!]!
}

input CountCollectionInput {
  id: Float!
}

input PaginateCollectionInput {
  keyword: String
  page: Float!
  limit: Float!
  natureId: Float!
  userId: Float!
}

input AuthInput {
  email: String!
  password: String!
}

type Mutation {
  createArea(input: CreateAreaInput!): Area!
  removeArea(id: Int!): Area!
  createSpecies(createSpeciesInput: CreateSpeciesInput!): Species!
  removeSpecies(id: Int!): Species!
  createDiscover(createDiscoverInput: CreateDiscoverInput!): Discover!
  updateDiscover(updateDiscoverInput: UpdateDiscoverInput!): Discover!
  removeDiscover(id: Int!): Discover!
  updatePersonAvatar(id: Int!, avatar: Upload!): Person!
  createUser(input: CreateUserInput!, avatar: Upload!): User!
  updateUser(input: UpdateUserInput!): User!
  updatePassword(input: UpdatePasswordInput!): User
  createCollection(detail: CreateCollectionInput!, images: [Upload!]!): Collection!
  updateCollectionImage(input: UpdateCollectionImageInput!, image: Upload!): Collection!
  addCollectionImage(collectionId: Int!, image: Upload!): Collection!
  updateCollection(input: UpdateCollectionInput!): Collection!
  removeCollection(id: Int!): Collection!
  createVisit(createVisitInput: CreateVisitInput!): Visit!
  updateVisit(updateVisitInput: UpdateVisitInput!): Visit!
  removeVisit(id: Int!): Visit!
  createSubscription(createSubscriptionInput: CreateSubscriptionInput!): Subscription!
  updateSubscription(updateSubscriptionInput: UpdateSubscriptionInput!): Subscription!
  removeSubscription(id: Int!): Subscription!
  createLocalization(createLocalizationInput: CreateLocalizationInput!): Localization!
  updateLocalization(updateLocalizationInput: UpdateLocalizationInput!): Localization!
  removeLocalization(id: Int!): Localization!
  createPrice(createPriceInput: CreatePriceInput!): Price!
  updatePrice(updatePriceInput: PriceOutput!): Price!
  removePrice(id: Int!): Price!
}

input CreateAreaInput {
  name: String!
}

input CreateSpeciesInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateDiscoverInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateDiscoverInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateUserInput {
  lastName: String!
  firstName: String!
  email: String!
  phone: String!
  gender: Float!
  password: String!
}

input UpdateUserInput {
  lastName: String!
  firstName: String!
  email: String!
  phone: String!
  gender: Float!
  id: Int!
  role: Int!
  active: Boolean!
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateCollectionInput {
  naming: String!
  place: String!
  description: String!
  natureId: Int!
}

input UpdateCollectionImageInput {
  collectionId: Float!
  imageIndex: Float!
}

input UpdateCollectionInput {
  naming: String!
  place: String!
  description: String!
  natureId: Int!
  id: Float!
}

input CreateVisitInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateVisitInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateSubscriptionInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSubscriptionInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateLocalizationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateLocalizationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreatePriceInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input PriceOutput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}
